name: Security CI - API

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch: {}

jobs:
  sast_sca_dast:
    runs-on: ubuntu-24.04

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wisebuddy
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot"
          --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - uses: actions/checkout@v4

      - name: Ensure jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # ---------- SAST (Semgrep) ----------
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - run: pip install semgrep==1.93.0

      - name: Semgrep (Java)
        run: |
          semgrep --config p/owasp-top-ten --config p/java \
                  --exclude target \
                  --json --output semgrep-java.json

      - name: Semgrep (JS/TS)
        run: |
          semgrep --config p/owasp-top-ten --config p/javascript \
                  --exclude target \
                  --json --output semgrep-js.json || true

      # ---------- Secret scanning ----------
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-banner --redact --report-format json --report-path gitleaks.json

      # ---------- Build da API ----------
      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: "21" }

      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - run: mvn -B -DskipTests package

      # ---------- SCA (OWASP Dependency-Check) ----------
      - name: OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "WiseBuddyAPI"
          path: "."
          format: "HTML,JSON"
          args: >
            --failOnCVSS 7
            --disableYarnAudit
            --disableNodeAudit
        continue-on-error: true

      - name: Move DepCheck reports
        run: |
          mkdir -p security-reports/api
          mv dependency-check-report.html security-reports/api/depcheck.html || true
          mv dependency-check-report.json security-reports/api/depcheck.json || true

      # ---------- Seed + subir API para DAST ----------
      - name: Seed DB
        run: |
          cat > seed.sql <<'SQL'
          CREATE TABLE IF NOT EXISTS users (
            id BIGINT PRIMARY KEY AUTO_INCREMENT,
            name VARCHAR(100), email VARCHAR(120) UNIQUE,
            password VARCHAR(255), role VARCHAR(20)
          );
          INSERT IGNORE INTO users (name,email,password,role) VALUES
            ('Admin','admin@wisebuddy.dev', SHA2('Admin@123',256), 'ADMIN'),
            ('User','user@wisebuddy.dev',  SHA2('User@123',256),  'USER');
          SQL
          sudo apt-get install -y mysql-client
          mysql -h 127.0.0.1 -uroot -proot wisebuddy < seed.sql

      - name: Run API
        run: |
          nohup java -jar target/*.jar \
            --spring.datasource.url=jdbc:mysql://127.0.0.1:3306/wisebuddy \
            --spring.datasource.username=root --spring.datasource.password=root \
            --server.port=8085 --spring.profiles.active=prod > api.log 2>&1 &
          echo $! > api.pid
          sleep 20
          (curl -sSf http://127.0.0.1:8085/v3/api-docs || curl -sSf http://127.0.0.1:8085/) >/dev/null

      - name: Wait API up
        run: |
          for i in {1..30}; do
            if curl -fsS http://127.0.0.1:8085/v3/api-docs >/dev/null; then
              echo "API UP"; exit 0
            fi
            sleep 2
          done
          echo "API didn't start in time"; cat api.log || true; exit 1

      # ---------- DAST (OWASP ZAP) ----------
      - name: ZAP Baseline (throttled)
        uses: zaproxy/action-baseline@v0.13.0
        with:
          target: "http://127.0.0.1:8085"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: >
            -m 5                  # minutos de spider/passive scan
            -I                    # não falha em WARN
            -a                    # incluir regras do passive scan
            --auto                # usa automation framework
            -z "spider.maxDuration=2"
          artifact_name: "zap-scan"   # <-- nome corrigido
        continue-on-error: true

      - name: Collect ZAP
        run: |
          mkdir -p security-reports/api
          [ -f report_html.html ] && mv report_html.html security-reports/api/zap.html || true
          [ -f report_json.json ] && mv report_json.json security-reports/api/zap.json || true
          [ -f api.log ] && mv api.log security-reports/api/api.log || true


      # ---------- RELATÓRIO (HTML + PDF rico) ----------
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      
      - name: Build rich HTML report
        run: |
          mkdir -p security-reports
          node <<'NODE'
          const fs = require('fs');
      
          // Helpers
          const safeRead = (p, fallback) => {
            try { return JSON.parse(fs.readFileSync(p, 'utf8')); } catch { return fallback; }
          };
          const exists = p => { try { fs.accessSync(p); return true; } catch { return false; } };
          const esc = s => String(s??'').replace(/[&<>]/g,m=>({ '&':'&amp;','<':'&lt;','>':'&gt;' }[m]));
      
          // Load artifacts (se existirem)
          const semgrepJava = safeRead('semgrep-java.json', {results:[]});
          const semgrepJs   = safeRead('semgrep-js.json',   {results:[]});
          const zap         = safeRead('security-reports/api/zap.json', {site:[]});
          const depcheck    = safeRead('security-reports/api/depcheck.json', {dependencies:[]});
          const apiLog      = exists('security-reports/api/api.log') ? fs.readFileSync('security-reports/api/api.log','utf8') : '';
      
          // ---- SAST (Semgrep) ----
          const sgAll = [...semgrepJava.results, ...semgrepJs.results];
          const sevOrder = {ERROR:3, WARNING:2, INFO:1, LOW:1, MEDIUM:2, HIGH:3};
          const sgCounts = sgAll.reduce((acc,r)=>{ const s=r.extra?.severity||'INFO'; acc[s]=(acc[s]||0)+1; return acc; },{});
          const sgTop = sgAll
            .sort((a,b)=> (sevOrder[b.extra?.severity||'INFO'] - sevOrder[a.extra?.severity||'INFO']))
            .slice(0,20)
            .map(r=>({
              id: r.check_id,
              sev: r.extra?.severity,
              msg: r.extra?.message,
              file: r.path,
              line: r.start?.line,
              cwe: r.extra?.metadata?.cwe?.[0] || r.extra?.metadata?.cwe || '',
              owasp: r.extra?.metadata?.owasp || ''
            }));
      
          // Recomendações básicas por severidade (fallback)
          const tipBySev = s => ({
            'ERROR':'Corrija imediatamente. Implemente validação/escape, saneamento de inputs e políticas de authz. Adicione testes cobrindo o caso.',
            'WARNING':'Planeje correção. Endureça configurações (headers, timeouts, validação), evite APIs inseguras.',
            'INFO':'Boa prática: revise e considere hardening.'
          }[s] || 'Revise e corrija conforme aplicável.');
      
          // ---- DAST (ZAP) ----
          const zapAlerts = [];
          (zap.site||[]).forEach(site=>{
            (site.alerts||[]).forEach(a=>{
              const inst = (a.instances||[]).slice(0,3).map(i=>({
                uri: i.uri, method: i.method, evidence: i.evidence, attack: i.attack
              }));
              zapAlerts.push({
                pluginId: a.pluginid || a.id,
                name: a.alert || a.name,
                risk: a.risk || a.riskcode || a.severity,
                confidence: a.confidence,
                desc: a.desc,
                solution: a.solution,
                ref: a.reference,
                count: a.count || inst.length || 1,
                instances: inst
              });
            });
          });
          const riskOrder = { 'High':3, 'Medium':2, 'Low':1, 'Informational':0, 'Informational (Low)':0, 'Info':0 };
          const zapCounts = zapAlerts.reduce((acc,a)=>{ const r=a.risk||'Info'; acc[r]=(acc[r]||0)+1; return acc; },{});
          const zapTop = zapAlerts.sort((a,b)=> (riskOrder[b.risk||'Info'] - riskOrder[a.risk||'Info'])).slice(0,15);
      
          // ---- SCA (Dependency-Check) ----
          const deps = (depcheck.dependencies||[]).flatMap(d=>{
            const vulns = d.vulnerabilities || [];
            return vulns.map(v=>({
              name: d.fileName || d.name || d.packagePath || 'unknown',
              purl: d.packagePath || '',
              id: v.name || v.cve || v.id,
              desc: v.description,
              score: v.cvssScore || v.cvssv3?.baseScore || v.cvssv2?.score,
              severity: v.severity || ( (v.cvssScore>=9) ? 'CRITICAL' : (v.cvssScore>=7?'HIGH': (v.cvssScore>=4?'MEDIUM':'LOW')) ),
              refs: (v.references||[]).map(r=>r.url).filter(Boolean).slice(0,3)
            }));
          });
          const scaCounts = deps.reduce((a,v)=>{ a[v.severity]=(a[v.severity]||0)+1; return a; },{});
          const depsTop = deps.sort((a,b)=> ( (b.score||0) - (a.score||0) )).slice(0,20);
      
          // ---- Sumário executivo ----
          const sum = {
            semgrepTotal: sgAll.length, semgrepBy: sgCounts,
            zapTotal: zapAlerts.length, zapBy: zapCounts,
            scaTotal: deps.length, scaBy: scaCounts
          };
      
          // Pequeno CSS
          const css = `
            body{font-family:Arial,Helvetica,sans-serif;margin:24px}
            h1{margin-bottom:4px} h2{margin-top:28px}
            .grid{display:grid;grid-template-columns:repeat(3,minmax(0,1fr));gap:12px}
            .card{border:1px solid #ddd;border-radius:10px;padding:12px}
            table{width:100%;border-collapse:collapse;margin-top:8px}
            th,td{border:1px solid #e5e5e5;padding:6px;text-align:left;font-size:14px;vertical-align:top}
            th{background:#f7f7f7}
            .sev-ERROR{color:#a40000;font-weight:700}
            .sev-WARNING{color:#a66b00;font-weight:700}
            .sev-INFO{color:#555}
            .risk-High{color:#a40000;font-weight:700}
            .risk-Medium{color:#a66b00;font-weight:700}
            .risk-Low,.risk-Info{color:#555}
            code,pre{background:#111;color:#eee;padding:8px;border-radius:6px;overflow:auto}
            .small{font-size:12px;color:#666}
          `;
      
          // Tabelas helpers
          const renderCounts = (obj) => {
            const entries = Object.entries(obj||{}).sort((a,b)=> (b[1]-a[1]));
            if (!entries.length) return '<p class="small">Sem achados.</p>';
            return `<table><tr><th>Categoria</th><th>Qtde</th></tr>${
              entries.map(([k,v])=>`<tr><td>${esc(k)}</td><td>${v}</td></tr>`).join('')
            }</table>`;
          };
      
          // HTML
          const html = `<!doctype html>
          <html><head><meta charset="utf-8"><title>Relatório de Segurança - API</title>
          <style>${css}</style></head><body>
            <h1>Relatório de Segurança — WiseBuddy API</h1>
            <p class="small">Gerado em ${new Date().toISOString()} | Pipeline: SAST (Semgrep), DAST (OWASP ZAP), SCA (Dependency-Check), Secret Scan (Gitleaks)</p>
      
            <h2>Sumário Executivo</h2>
            <div class="grid">
              <div class="card"><b>SAST (Semgrep)</b>${renderCounts(sum.semgrepBy)}<p>Total: <b>${sum.semgrepTotal}</b></p></div>
              <div class="card"><b>DAST (ZAP)</b>${renderCounts(sum.zapBy)}<p>Total: <b>${sum.zapTotal}</b></p></div>
              <div class="card"><b>SCA (Dependências)</b>${renderCounts(sum.scaBy)}<p>Total: <b>${sum.scaTotal}</b></p></div>
            </div>
      
            <h2>Tarefa 1 — SAST (Semgrep)</h2>
            <p>Vulnerabilidades classificadas por severidade (Semgrep). Recomendações básicas ao lado de cada severidade.</p>
            ${renderCounts(sum.semgrepBy)}
            <p class="small"><b>Recomendações:</b> ERROR → ${tipBySev('ERROR')} | WARNING → ${tipBySev('WARNING')} | INFO → ${tipBySev('INFO')}</p>
            <table>
              <tr><th>Sev.</th><th>Regra</th><th>Arquivo</th><th>Linha</th><th>Descrição</th><th>Referências</th></tr>
              ${sgTop.map(r=>`
                <tr>
                  <td class="sev-${esc(r.sev)}">${esc(r.sev||'')}</td>
                  <td><code>${esc(r.id||'')}</code></td>
                  <td>${esc(r.file||'')}</td>
                  <td>${esc(r.line||'')}</td>
                  <td>${esc(r.msg||'')}</td>
                  <td class="small">
                    ${r.cwe ? `CWE: ${esc(r.cwe)}<br>`:''}
                    ${r.owasp ? `OWASP: ${esc(r.owasp)}`:''}
                  </td>
                </tr>
              `).join('') || '<tr><td colspan="6">Sem achados relevantes.</td></tr>'}
            </table>
      
            <h2>Tarefa 2 — DAST (OWASP ZAP)</h2>
            <p>Varredura dinâmica em staging local no runner. Abaixo, evidências e payloads (quando fornecidos pelo ZAP).</p>
            ${renderCounts(sum.zapBy)}
            <table>
              <tr><th>Risco</th><th>Alerta</th><th>Evidências / Payloads</th><th>Mitigação sugerida</th></tr>
              ${zapTop.map(a=>`
                <tr>
                  <td class="risk-${esc(a.risk||'Info')}">${esc(a.risk||'Info')}</td>
                  <td><b>${esc(a.name||'')}</b><br><span class="small">Confiança: ${esc(a.confidence||'')}</span></td>
                  <td class="small">
                    ${(a.instances||[]).map(i=>`
                      <div>
                        <div><b>${esc(i.method||'GET')}</b> ${esc(i.uri||'')}</div>
                        ${i.attack? `<div>Payload: <code>${esc(i.attack)}</code></div>`:''}
                        ${i.evidence? `<div>Evidência: <code>${esc(i.evidence)}</code></div>`:''}
                      </div>
                    `).join('') || '—'}
                  </td>
                  <td class="small">${esc(a.solution||'Consultar referências OWASP e aplicar hardening/validação.')}</td>
                </tr>
              `).join('') || '<tr><td colspan="4">Sem achados.</td></tr>'}
            </table>
      
            <h2>Tarefa 3 — SCA (Dependency-Check)</h2>
            <p>Dependências com CVEs e riscos associados. Sugestões: atualizar para versão corrigida quando disponível, avaliar substituição por libs mantidas.</p>
            ${renderCounts(sum.scaBy)}
            <table>
              <tr><th>Sev.</th><th>Biblioteca</th><th>CVE/ID</th><th>Score</th><th>Descrição</th><th>Referências</th></tr>
              ${depsTop.map(v=>`
                <tr>
                  <td>${esc(v.severity||'')}</td>
                  <td><code>${esc(v.name||'')}</code></td>
                  <td>${esc(v.id||'')}</td>
                  <td>${esc(v.score||'')}</td>
                  <td class="small">${esc((v.desc||'').substring(0,300))}${(v.desc||'').length>300?'...':''}</td>
                  <td class="small">${(v.refs||[]).map(u=>`<div><a href="${esc(u)}">${esc(u)}</a></div>`).join('') || '—'}</td>
                </tr>
              `).join('') || '<tr><td colspan="6">Sem achados.</td></tr>'}
            </table>
      
            <h2>Tarefa 4 — Integração e Monitoramento CI/CD</h2>
            <ul>
              <li><b>Gatilhos:</b> push/PR em qualquer branch + manual (workflow_dispatch)</li>
              <li><b>Gates:</b> falha em Semgrep (ERROR/WARNING) e em SCA (CVSS ≥ 9). ZAP não bloqueia, gera evidências.</li>
              <li><b>Notificações:</b> envio de e-mail (SMTP) com PDF anexado nas execuções de <i>push</i> (exclui PR).</li>
              <li><b>Logs:</b> trecho do log da API durante o DAST:</li>
            </ul>
            <pre>${esc(apiLog.split('\n').slice(-80).join('\n'))}</pre>
      
            <h2>Links/Artefatos</h2>
            <ul>
              ${exists('security-reports/api/zap.html')?'<li><a href="./api/zap.html">ZAP (HTML)</a></li>':''}
              ${exists('security-reports/api/depcheck.html')?'<li><a href="./api/depcheck.html">Dependency-Check (HTML)</a></li>':''}
              ${exists('semgrep-java.json')?'<li><a href="../semgrep-java.json">Semgrep Java (JSON)</a></li>':''}
              ${exists('semgrep-js.json')?'<li><a href="../semgrep-js.json">Semgrep JS (JSON)</a></li>':''}
              ${exists('gitleaks.json')?'<li><a href="../gitleaks.json">Gitleaks (JSON)</a></li>':''}
            </ul>
          </body></html>`;
      
          fs.writeFileSync('security-reports/index.html', html);
          console.log('OK: security-reports/index.html gerado');
          NODE
      
      - uses: actions/upload-artifact@v4
        with:
          name: security-report-api-html
          path: security-reports/index.html
      
      - name: Generate PDF (rich)
        run: |
          npm i puppeteer@23
          node -e "
            const puppeteer=require('puppeteer');
            (async()=>{
              const b=await puppeteer.launch({args:['--no-sandbox']});
              const p=await b.newPage();
              await p.goto('file://' + process.cwd() + '/security-reports/index.html',{waitUntil:'load'});
              await p.pdf({path:'security-reports/security-report-api.pdf', format:'A4', printBackground:true, margin:{top:'12mm',right:'10mm',bottom:'14mm',left:'10mm'}});
              await b.close();
            })();
          "
      
      - uses: actions/upload-artifact@v4
        with:
          name: security-report-api-pdf
          path: security-reports/security-report-api.pdf

      # ---------- Gates ----------
      - name: Fail on Semgrep High/Critical
        run: |
          jq -e '[.results[] | select(.extra.severity=="ERROR" or .extra.severity=="WARNING")] | length == 0' semgrep-java.json \
          || (echo "Semgrep HIGH/CRITICAL" && exit 1)

      - name: Fail on DepCheck CVSS >= 9
        run: |
          [ -f security-reports/api/depcheck.json ] || exit 0
          CRIT=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.cvssScore>=9)] | length' security-reports/api/depcheck.json)
          [ "$CRIT" -gt 0 ] && { echo "Critical CVEs: $CRIT"; exit 1; } || true

      - name: Stop API
        if: always()
        run: kill $(cat api.pid) || true

      # ---------- Email (desativado em PRs) ----------
      - name: Send email
        if: always() && github.event_name != 'pull_request'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          secure: false
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          subject: "[Security CI] WiseBuddyAPI - ${{ github.workflow }} #${{ github.run_number }}"
          from: ${{ secrets.SMTP_FROM }}
          to: ${{ secrets.NOTIFY_TO }}
          attachments: security-reports/security-report-api.pdf
          html_body: "<p>Relatório de segurança da API concluído.</p>"
